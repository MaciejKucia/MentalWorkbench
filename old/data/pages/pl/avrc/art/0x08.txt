====== PROGMEM ======

Przeanalizujmy następujący fragment kodu: <code c>LCD_write("Jakis tekst");</code> Jest to fragment kodu wypisujący na wyświetlaczu LCD tekst. Pomimo że wydaje się to optymalnym rozwiązaniem takim nie jest. Co się powinno dziać w przypadku wywołania takiej funkcji? Funkcja powinna pobierać znak po znaku każdą literę z pamięci programu i wysyłać je do wyświetlacza. Niestety funkcja ta nie odczytuje tekstu z pamięci programu (przypominam FLASH) lecz z pamięci RAM co jest wielką stratą i kosztuje nas cykle pracy układu. Jest jednak sposób na oszczędzenie pamięci. Będziemy korzystać z nagłówka: <code c>#include <avr/pgmspace.h></code>Teraz jeżeli chcemy przechowywać łańcuch znaków tylko w pamięci programu napiszemy: <code c>const char string[] PROGMEM = "Ten łańcuch znaków nie może zostać zmieniony i jest przechowywany w pamięci FLASH.";</code> Lub kożystając z makra możemy wprowadzać łańcuchy wewnątrz kodu:<code c>LCD_write_P(PSTR("Program Memory String"));</code>Niestety to nie wszystko co trzeba zrobić, zmienna ''string'' oraz makro zwracają adres w pamięci FLASH a nie RAM tak jak jest to oczekiwane przez dotychczas istniejące funkcje. Trzeba je niestety zmodyfikować. Przeanalizujmy następujące fragmenty kodu: <code c>while (*data != '\0') ...
while (pgm_read_byte(data) != 0x00) </code>W przypadku odczytu z pamięci RAM korzystamy z pierwszej pętli natomiast aby odczytać bajt z pamięci programu należy wykorzystać funkcję ''pgm_read_byte''. Często wyróżnia się funkcje odczytujące z pamięci FLASH kończąc ich nazwę na ''_P''.




Bardzo dobre opracowanie PROGMEM: [[http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&t=38003|AVRFreaks]] [EN]